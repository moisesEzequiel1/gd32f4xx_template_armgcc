
Build/Base_Makefile_GD32f4xx.elf:     file format elf32-littlearm


Disassembly of section .text:

08000188 <deregister_tm_clones>:
 8000188:	4803      	ldr	r0, [pc, #12]	@ (8000198 <deregister_tm_clones+0x10>)
 800018a:	4b04      	ldr	r3, [pc, #16]	@ (800019c <deregister_tm_clones+0x14>)
 800018c:	4283      	cmp	r3, r0
 800018e:	d002      	beq.n	8000196 <deregister_tm_clones+0xe>
 8000190:	4b03      	ldr	r3, [pc, #12]	@ (80001a0 <deregister_tm_clones+0x18>)
 8000192:	b103      	cbz	r3, 8000196 <deregister_tm_clones+0xe>
 8000194:	4718      	bx	r3
 8000196:	4770      	bx	lr
 8000198:	20000000 	.word	0x20000000
 800019c:	20000000 	.word	0x20000000
 80001a0:	00000000 	.word	0x00000000

080001a4 <register_tm_clones>:
 80001a4:	4805      	ldr	r0, [pc, #20]	@ (80001bc <register_tm_clones+0x18>)
 80001a6:	4b06      	ldr	r3, [pc, #24]	@ (80001c0 <register_tm_clones+0x1c>)
 80001a8:	1a1b      	subs	r3, r3, r0
 80001aa:	0fd9      	lsrs	r1, r3, #31
 80001ac:	eb01 01a3 	add.w	r1, r1, r3, asr #2
 80001b0:	1049      	asrs	r1, r1, #1
 80001b2:	d002      	beq.n	80001ba <register_tm_clones+0x16>
 80001b4:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <register_tm_clones+0x20>)
 80001b6:	b103      	cbz	r3, 80001ba <register_tm_clones+0x16>
 80001b8:	4718      	bx	r3
 80001ba:	4770      	bx	lr
 80001bc:	20000000 	.word	0x20000000
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c06      	ldr	r4, [pc, #24]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b943      	cbnz	r3, 80001e2 <__do_global_dtors_aux+0x1a>
 80001d0:	f7ff ffda 	bl	8000188 <deregister_tm_clones>
 80001d4:	4b04      	ldr	r3, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	b113      	cbz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d8:	4804      	ldr	r0, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x24>)
 80001da:	f3af 8000 	nop.w
 80001de:	2301      	movs	r3, #1
 80001e0:	7023      	strb	r3, [r4, #0]
 80001e2:	bd10      	pop	{r4, pc}
 80001e4:	20000000 	.word	0x20000000
 80001e8:	00000000 	.word	0x00000000
 80001ec:	080005b0 	.word	0x080005b0

080001f0 <frame_dummy>:
 80001f0:	b508      	push	{r3, lr}
 80001f2:	4b04      	ldr	r3, [pc, #16]	@ (8000204 <frame_dummy+0x14>)
 80001f4:	b11b      	cbz	r3, 80001fe <frame_dummy+0xe>
 80001f6:	4904      	ldr	r1, [pc, #16]	@ (8000208 <frame_dummy+0x18>)
 80001f8:	4804      	ldr	r0, [pc, #16]	@ (800020c <frame_dummy+0x1c>)
 80001fa:	f3af 8000 	nop.w
 80001fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000202:	e7cf      	b.n	80001a4 <register_tm_clones>
 8000204:	00000000 	.word	0x00000000
 8000208:	20000004 	.word	0x20000004
 800020c:	080005b0 	.word	0x080005b0

08000210 <__libc_init_array>:
 8000210:	b570      	push	{r4, r5, r6, lr}
 8000212:	4b0f      	ldr	r3, [pc, #60]	@ (8000250 <__libc_init_array+0x40>)
 8000214:	4d0f      	ldr	r5, [pc, #60]	@ (8000254 <__libc_init_array+0x44>)
 8000216:	42ab      	cmp	r3, r5
 8000218:	eba3 0605 	sub.w	r6, r3, r5
 800021c:	d007      	beq.n	800022e <__libc_init_array+0x1e>
 800021e:	10b6      	asrs	r6, r6, #2
 8000220:	2400      	movs	r4, #0
 8000222:	f855 3b04 	ldr.w	r3, [r5], #4
 8000226:	3401      	adds	r4, #1
 8000228:	4798      	blx	r3
 800022a:	42a6      	cmp	r6, r4
 800022c:	d8f9      	bhi.n	8000222 <__libc_init_array+0x12>
 800022e:	f000 f9bf 	bl	80005b0 <_init>
 8000232:	4d09      	ldr	r5, [pc, #36]	@ (8000258 <__libc_init_array+0x48>)
 8000234:	4b09      	ldr	r3, [pc, #36]	@ (800025c <__libc_init_array+0x4c>)
 8000236:	1b5e      	subs	r6, r3, r5
 8000238:	42ab      	cmp	r3, r5
 800023a:	ea4f 06a6 	mov.w	r6, r6, asr #2
 800023e:	d006      	beq.n	800024e <__libc_init_array+0x3e>
 8000240:	2400      	movs	r4, #0
 8000242:	f855 3b04 	ldr.w	r3, [r5], #4
 8000246:	3401      	adds	r4, #1
 8000248:	4798      	blx	r3
 800024a:	42a6      	cmp	r6, r4
 800024c:	d8f9      	bhi.n	8000242 <__libc_init_array+0x32>
 800024e:	bd70      	pop	{r4, r5, r6, pc}
 8000250:	080005c8 	.word	0x080005c8
 8000254:	080005c8 	.word	0x080005c8
 8000258:	080005c8 	.word	0x080005c8
 800025c:	080005d0 	.word	0x080005d0

08000260 <atexit>:
 8000260:	2300      	movs	r3, #0
 8000262:	4601      	mov	r1, r0
 8000264:	461a      	mov	r2, r3
 8000266:	4618      	mov	r0, r3
 8000268:	f000 b814 	b.w	8000294 <__register_exitproc>

0800026c <__libc_fini_array>:
 800026c:	b538      	push	{r3, r4, r5, lr}
 800026e:	4d07      	ldr	r5, [pc, #28]	@ (800028c <__libc_fini_array+0x20>)
 8000270:	4c07      	ldr	r4, [pc, #28]	@ (8000290 <__libc_fini_array+0x24>)
 8000272:	1b2c      	subs	r4, r5, r4
 8000274:	10a4      	asrs	r4, r4, #2
 8000276:	d005      	beq.n	8000284 <__libc_fini_array+0x18>
 8000278:	3c01      	subs	r4, #1
 800027a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800027e:	4798      	blx	r3
 8000280:	2c00      	cmp	r4, #0
 8000282:	d1f9      	bne.n	8000278 <__libc_fini_array+0xc>
 8000284:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000288:	f000 b998 	b.w	80005bc <_fini>
 800028c:	080005d4 	.word	0x080005d4
 8000290:	080005d0 	.word	0x080005d0

08000294 <__register_exitproc>:
 8000294:	b470      	push	{r4, r5, r6}
 8000296:	4d16      	ldr	r5, [pc, #88]	@ (80002f0 <__register_exitproc+0x5c>)
 8000298:	682c      	ldr	r4, [r5, #0]
 800029a:	b31c      	cbz	r4, 80002e4 <__register_exitproc+0x50>
 800029c:	6865      	ldr	r5, [r4, #4]
 800029e:	2d1f      	cmp	r5, #31
 80002a0:	dc23      	bgt.n	80002ea <__register_exitproc+0x56>
 80002a2:	b938      	cbnz	r0, 80002b4 <__register_exitproc+0x20>
 80002a4:	1cab      	adds	r3, r5, #2
 80002a6:	3501      	adds	r5, #1
 80002a8:	6065      	str	r5, [r4, #4]
 80002aa:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
 80002ae:	2000      	movs	r0, #0
 80002b0:	bc70      	pop	{r4, r5, r6}
 80002b2:	4770      	bx	lr
 80002b4:	eb04 0c85 	add.w	ip, r4, r5, lsl #2
 80002b8:	2802      	cmp	r0, #2
 80002ba:	f8cc 2088 	str.w	r2, [ip, #136]	@ 0x88
 80002be:	f8d4 6188 	ldr.w	r6, [r4, #392]	@ 0x188
 80002c2:	f04f 0201 	mov.w	r2, #1
 80002c6:	fa02 f205 	lsl.w	r2, r2, r5
 80002ca:	ea46 0602 	orr.w	r6, r6, r2
 80002ce:	f8c4 6188 	str.w	r6, [r4, #392]	@ 0x188
 80002d2:	f8cc 3108 	str.w	r3, [ip, #264]	@ 0x108
 80002d6:	d1e5      	bne.n	80002a4 <__register_exitproc+0x10>
 80002d8:	f8d4 318c 	ldr.w	r3, [r4, #396]	@ 0x18c
 80002dc:	4313      	orrs	r3, r2
 80002de:	f8c4 318c 	str.w	r3, [r4, #396]	@ 0x18c
 80002e2:	e7df      	b.n	80002a4 <__register_exitproc+0x10>
 80002e4:	4c03      	ldr	r4, [pc, #12]	@ (80002f4 <__register_exitproc+0x60>)
 80002e6:	602c      	str	r4, [r5, #0]
 80002e8:	e7d8      	b.n	800029c <__register_exitproc+0x8>
 80002ea:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80002ee:	e7df      	b.n	80002b0 <__register_exitproc+0x1c>
 80002f0:	2000001c 	.word	0x2000001c
 80002f4:	20000020 	.word	0x20000020

080002f8 <SystemInit>:
*/
void SystemInit (void)
{
    /* FPU settings */
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80002f8:	4a37      	ldr	r2, [pc, #220]	@ (80003d8 <SystemInit+0xe0>)
 80002fa:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 80002fe:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000302:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
{
    uint32_t timeout = 0U;
    uint32_t stab_flag = 0U;
    
    /* enable HXTAL */
    RCU_CTL |= RCU_CTL_HXTALEN;
 8000306:	4a35      	ldr	r2, [pc, #212]	@ (80003dc <SystemInit+0xe4>)
 8000308:	f8d2 3800 	ldr.w	r3, [r2, #2048]	@ 0x800
 800030c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000310:	f8c2 3800 	str.w	r3, [r2, #2048]	@ 0x800
 8000314:	f64f 73ff 	movw	r3, #65535	@ 0xffff

    /* wait until HXTAL is stable or the startup time is longer than HXTAL_STARTUP_TIMEOUT */
    do{
        timeout++;
        stab_flag = (RCU_CTL & RCU_CTL_HXTALSTB);
 8000318:	4611      	mov	r1, r2
 800031a:	f8d1 2800 	ldr.w	r2, [r1, #2048]	@ 0x800
    }while((0U == stab_flag) && (HXTAL_STARTUP_TIMEOUT != timeout));
 800031e:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 8000322:	d101      	bne.n	8000328 <SystemInit+0x30>
 8000324:	3b01      	subs	r3, #1
 8000326:	d1f8      	bne.n	800031a <SystemInit+0x22>

    /* if fail */
    if(0U == (RCU_CTL & RCU_CTL_HXTALSTB)){
 8000328:	4b2c      	ldr	r3, [pc, #176]	@ (80003dc <SystemInit+0xe4>)
 800032a:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800032e:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8000332:	d100      	bne.n	8000336 <SystemInit+0x3e>
        while(1){
 8000334:	e7fe      	b.n	8000334 <SystemInit+0x3c>
        }
    }
         
    RCU_APB1EN |= RCU_APB1EN_PMUEN;
 8000336:	4b29      	ldr	r3, [pc, #164]	@ (80003dc <SystemInit+0xe4>)
 8000338:	f8d3 2840 	ldr.w	r2, [r3, #2112]	@ 0x840
 800033c:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8000340:	f8c3 2840 	str.w	r2, [r3, #2112]	@ 0x840
    PMU_CTL |= PMU_CTL_LDOVS;
 8000344:	4926      	ldr	r1, [pc, #152]	@ (80003e0 <SystemInit+0xe8>)
 8000346:	680a      	ldr	r2, [r1, #0]
 8000348:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 800034c:	600a      	str	r2, [r1, #0]

    /* HXTAL is stable */
    /* AHB = SYSCLK */
    RCU_CFG0 |= RCU_AHB_CKSYS_DIV1;
 800034e:	f8d3 2808 	ldr.w	r2, [r3, #2056]	@ 0x808
 8000352:	f8c3 2808 	str.w	r2, [r3, #2056]	@ 0x808
    /* APB2 = AHB/2 */
    RCU_CFG0 |= RCU_APB2_CKAHB_DIV2;
 8000356:	f8d3 2808 	ldr.w	r2, [r3, #2056]	@ 0x808
 800035a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800035e:	f8c3 2808 	str.w	r2, [r3, #2056]	@ 0x808
    /* APB1 = AHB/4 */
    RCU_CFG0 |= RCU_APB1_CKAHB_DIV4;
 8000362:	f8d3 2808 	ldr.w	r2, [r3, #2056]	@ 0x808
 8000366:	f442 52a0 	orr.w	r2, r2, #5120	@ 0x1400
 800036a:	f8c3 2808 	str.w	r2, [r3, #2056]	@ 0x808

    /* Configure the main PLL, PSC = 25, PLL_N = 400, PLL_P = 2, PLL_Q = 9 */ 
    RCU_PLL = (25U | (400U << 6U) | (((2U >> 1U) - 1U) << 16U) |
 800036e:	4a1d      	ldr	r2, [pc, #116]	@ (80003e4 <SystemInit+0xec>)
 8000370:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
                   (RCU_PLLSRC_HXTAL) | (9U << 24U));

    /* enable PLL */
    RCU_CTL |= RCU_CTL_PLLEN;
 8000374:	f8d3 2800 	ldr.w	r2, [r3, #2048]	@ 0x800
 8000378:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 800037c:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800

    /* wait until PLL is stable */
    while(0U == (RCU_CTL & RCU_CTL_PLLSTB)){
 8000380:	461a      	mov	r2, r3
 8000382:	f8d2 3800 	ldr.w	r3, [r2, #2048]	@ 0x800
 8000386:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 800038a:	d0fa      	beq.n	8000382 <SystemInit+0x8a>
    }
    
    /* Enable the high-drive to extend the clock frequency to 200 Mhz */
    PMU_CTL |= PMU_CTL_HDEN;
 800038c:	4a14      	ldr	r2, [pc, #80]	@ (80003e0 <SystemInit+0xe8>)
 800038e:	6813      	ldr	r3, [r2, #0]
 8000390:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000394:	6013      	str	r3, [r2, #0]
    while(0U == (PMU_CS & PMU_CS_HDRF)){
 8000396:	6853      	ldr	r3, [r2, #4]
 8000398:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 800039c:	d0fb      	beq.n	8000396 <SystemInit+0x9e>
    }
    
    /* select the high-drive mode */
    PMU_CTL |= PMU_CTL_HDS;
 800039e:	4a10      	ldr	r2, [pc, #64]	@ (80003e0 <SystemInit+0xe8>)
 80003a0:	6813      	ldr	r3, [r2, #0]
 80003a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80003a6:	6013      	str	r3, [r2, #0]
    while(0U == (PMU_CS & PMU_CS_HDSRF)){
 80003a8:	6853      	ldr	r3, [r2, #4]
 80003aa:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80003ae:	d0fb      	beq.n	80003a8 <SystemInit+0xb0>
    } 
    
    /* select PLL as system clock */
    RCU_CFG0 &= ~RCU_CFG0_SCS;
 80003b0:	4b0a      	ldr	r3, [pc, #40]	@ (80003dc <SystemInit+0xe4>)
 80003b2:	f8d3 2808 	ldr.w	r2, [r3, #2056]	@ 0x808
 80003b6:	f022 0203 	bic.w	r2, r2, #3
 80003ba:	f8c3 2808 	str.w	r2, [r3, #2056]	@ 0x808
    RCU_CFG0 |= RCU_CKSYSSRC_PLLP;
 80003be:	f8d3 2808 	ldr.w	r2, [r3, #2056]	@ 0x808
 80003c2:	f042 0202 	orr.w	r2, r2, #2
 80003c6:	f8c3 2808 	str.w	r2, [r3, #2056]	@ 0x808

    /* wait until PLL is selected as system clock */
    while(0U == (RCU_CFG0 & RCU_SCSS_PLLP)){
 80003ca:	461a      	mov	r2, r3
 80003cc:	f8d2 3808 	ldr.w	r3, [r2, #2056]	@ 0x808
 80003d0:	f013 0f08 	tst.w	r3, #8
 80003d4:	d0fa      	beq.n	80003cc <SystemInit+0xd4>
}
 80003d6:	4770      	bx	lr
 80003d8:	e000ed00 	.word	0xe000ed00
 80003dc:	40023000 	.word	0x40023000
 80003e0:	40007000 	.word	0x40007000
 80003e4:	09406419 	.word	0x09406419

080003e8 <Reset_Handler>:
 80003e8:	2100      	movs	r1, #0
 80003ea:	e003      	b.n	80003f4 <LoopCopyDataInit>

080003ec <CopyDataInit>:
 80003ec:	4b0b      	ldr	r3, [pc, #44]	@ (800041c <LoopFillZerobss+0x14>)
 80003ee:	585b      	ldr	r3, [r3, r1]
 80003f0:	5043      	str	r3, [r0, r1]
 80003f2:	3104      	adds	r1, #4

080003f4 <LoopCopyDataInit>:
 80003f4:	480a      	ldr	r0, [pc, #40]	@ (8000420 <LoopFillZerobss+0x18>)
 80003f6:	4b0b      	ldr	r3, [pc, #44]	@ (8000424 <LoopFillZerobss+0x1c>)
 80003f8:	1842      	adds	r2, r0, r1
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d3f6      	bcc.n	80003ec <CopyDataInit>
 80003fe:	4a0a      	ldr	r2, [pc, #40]	@ (8000428 <LoopFillZerobss+0x20>)
 8000400:	e002      	b.n	8000408 <LoopFillZerobss>

08000402 <FillZerobss>:
 8000402:	2300      	movs	r3, #0
 8000404:	6013      	str	r3, [r2, #0]
 8000406:	3204      	adds	r2, #4

08000408 <LoopFillZerobss>:
 8000408:	4b08      	ldr	r3, [pc, #32]	@ (800042c <LoopFillZerobss+0x24>)
 800040a:	429a      	cmp	r2, r3
 800040c:	d3f9      	bcc.n	8000402 <FillZerobss>
 800040e:	f7ff ff73 	bl	80002f8 <SystemInit>
 8000412:	f7ff fefd 	bl	8000210 <__libc_init_array>
 8000416:	f000 f80d 	bl	8000434 <main>
 800041a:	4770      	bx	lr
 800041c:	080005d4 	.word	0x080005d4
 8000420:	20000000 	.word	0x20000000
 8000424:	20000000 	.word	0x20000000
 8000428:	20000000 	.word	0x20000000
 800042c:	200001b0 	.word	0x200001b0

08000430 <ADC_IRQHandler>:
 8000430:	e7fe      	b.n	8000430 <ADC_IRQHandler>
	...

08000434 <main>:

#include "Gpio.hpp"
#include "gd32f4xx.h"
#include "gd32f4xx_rcu.h"

int main() {
 8000434:	b500      	push	{lr}
 8000436:	b085      	sub	sp, #20

    rcu_periph_clock_enable(RCU_GPIOC);
 8000438:	f640 4002 	movw	r0, #3074	@ 0xc02
 800043c:	f000 f8a1 	bl	8000582 <rcu_periph_clock_enable>
    rcu_periph_clock_enable(RCU_GPIOA);
 8000440:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8000444:	f000 f89d 	bl	8000582 <rcu_periph_clock_enable>
    Gpio& gpioC = *reinterpret_cast<Gpio*>(GPIO_BASE + 0x00000800U);
    Gpio& gpioA= *reinterpret_cast<Gpio*>(GPIO_BASE + 0x00000000U);


  // 3. Crear pines como objetos GpioPin
    GpioPin led(gpioC, Gpio::Pin::Pin6);      // LED en PC6
 8000448:	2206      	movs	r2, #6
 800044a:	4915      	ldr	r1, [pc, #84]	@ (80004a0 <main+0x6c>)
 800044c:	a802      	add	r0, sp, #8
 800044e:	f000 f861 	bl	8000514 <_ZN7GpioPinC1ER4GpioNS0_3PinE>
    GpioPin button(gpioA, Gpio::Pin::Pin0);   // Botón en PA0
 8000452:	2200      	movs	r2, #0
 8000454:	4913      	ldr	r1, [pc, #76]	@ (80004a4 <main+0x70>)
 8000456:	4668      	mov	r0, sp
 8000458:	f000 f85c 	bl	8000514 <_ZN7GpioPinC1ER4GpioNS0_3PinE>

    // 4. Configurar LED como salida push-pull
    led.SetMode(Gpio::Mode::Output);
 800045c:	2101      	movs	r1, #1
 800045e:	a802      	add	r0, sp, #8
 8000460:	f000 f873 	bl	800054a <_ZNK7GpioPin7SetModeEN4Gpio4ModeE>
    led.SetOutputType(Gpio::OutputType::PushPull);
 8000464:	2100      	movs	r1, #0
 8000466:	a802      	add	r0, sp, #8
 8000468:	f000 f876 	bl	8000558 <_ZNK7GpioPin13SetOutputTypeEN4Gpio10OutputTypeE>
    led.SetOutputSpeed(Gpio::OutputSpeed::SpeedLevel0);
 800046c:	2100      	movs	r1, #0
 800046e:	a802      	add	r0, sp, #8
 8000470:	f000 f879 	bl	8000566 <_ZNK7GpioPin14SetOutputSpeedEN4Gpio11OutputSpeedE>

    // 5. Configurar botón como entrada pull-up
    button.SetMode(Gpio::Mode::Input);
 8000474:	2100      	movs	r1, #0
 8000476:	4668      	mov	r0, sp
 8000478:	f000 f867 	bl	800054a <_ZNK7GpioPin7SetModeEN4Gpio4ModeE>
    button.SetPull(Gpio::Pull::PullUp);
 800047c:	2101      	movs	r1, #1
 800047e:	4668      	mov	r0, sp
 8000480:	f000 f878 	bl	8000574 <_ZNK7GpioPin7SetPullEN4Gpio4PullE>
 8000484:	e002      	b.n	800048c <main+0x58>

    // 6. Loop principal
    while (1) {
        if (!button.GetState()) {
            // Botón presionado (estado bajo)
            led.Reset(); // Enciende el LED
 8000486:	a802      	add	r0, sp, #8
 8000488:	f000 f84f 	bl	800052a <_ZNK7GpioPin5ResetEv>
        if (!button.GetState()) {
 800048c:	4668      	mov	r0, sp
 800048e:	f000 f852 	bl	8000536 <_ZNK7GpioPin8GetStateEv>
 8000492:	2800      	cmp	r0, #0
 8000494:	d0f7      	beq.n	8000486 <main+0x52>
        } else {
            // Botón no presionado (estado alto)
            led.Set(); // Apaga el LED
 8000496:	a802      	add	r0, sp, #8
 8000498:	f000 f83f 	bl	800051a <_ZNK7GpioPin3SetEv>
 800049c:	e7f6      	b.n	800048c <main+0x58>
 800049e:	bf00      	nop
 80004a0:	40020800 	.word	0x40020800
 80004a4:	40020000 	.word	0x40020000

080004a8 <_ZN4Gpio10SetPinModeENS_3PinENS_4ModeE>:
constexpr auto etoi(E const value){
    return static_cast<std::underlying_type_t<E>>(value);
}

void Gpio::SetPinMode(const Pin pin, const Mode mode) {
    CTL = (CTL & ~(0b11 << etoi(pin) * 2)) | (etoi(mode) << etoi(pin) * 2);
 80004a8:	6803      	ldr	r3, [r0, #0]
 80004aa:	0049      	lsls	r1, r1, #1
 80004ac:	f04f 0c03 	mov.w	ip, #3
 80004b0:	fa0c fc01 	lsl.w	ip, ip, r1
 80004b4:	ea23 030c 	bic.w	r3, r3, ip
 80004b8:	408a      	lsls	r2, r1
 80004ba:	4313      	orrs	r3, r2
 80004bc:	6003      	str	r3, [r0, #0]

}
 80004be:	4770      	bx	lr

080004c0 <_ZN4Gpio13SetOutputTypeENS_3PinENS_10OutputTypeE>:

void Gpio::SetOutputType(const Pin pin, const OutputType type) {
    OMODE = (OMODE & ~(0b1 << etoi(pin))) | (etoi(type) << etoi(pin));
 80004c0:	6843      	ldr	r3, [r0, #4]
 80004c2:	f04f 0c01 	mov.w	ip, #1
 80004c6:	fa0c fc01 	lsl.w	ip, ip, r1
 80004ca:	ea23 030c 	bic.w	r3, r3, ip
 80004ce:	408a      	lsls	r2, r1
 80004d0:	4313      	orrs	r3, r2
 80004d2:	6043      	str	r3, [r0, #4]
}
 80004d4:	4770      	bx	lr

080004d6 <_ZN4Gpio18SetOutputTypeSpeedENS_3PinENS_11OutputSpeedE>:

void Gpio::SetOutputTypeSpeed(const Pin pin, const OutputSpeed speed) {
    OSPEED = (OSPEED & ~(0b11 << etoi(pin) * 2)) | (etoi(speed) << etoi(pin) * 2);
 80004d6:	6883      	ldr	r3, [r0, #8]
 80004d8:	0049      	lsls	r1, r1, #1
 80004da:	f04f 0c03 	mov.w	ip, #3
 80004de:	fa0c fc01 	lsl.w	ip, ip, r1
 80004e2:	ea23 030c 	bic.w	r3, r3, ip
 80004e6:	408a      	lsls	r2, r1
 80004e8:	4313      	orrs	r3, r2
 80004ea:	6083      	str	r3, [r0, #8]
}
 80004ec:	4770      	bx	lr

080004ee <_ZN4Gpio10SetPinPullENS_3PinENS_4PullE>:
void Gpio::SetPinPull(const Pin pin, const Pull pull) {
    PUD = (PUD & ~(0b11 << etoi(pin) * 2)) | (etoi(pull) << etoi(pin) * 2);
 80004ee:	68c3      	ldr	r3, [r0, #12]
 80004f0:	0049      	lsls	r1, r1, #1
 80004f2:	f04f 0c03 	mov.w	ip, #3
 80004f6:	fa0c fc01 	lsl.w	ip, ip, r1
 80004fa:	ea23 030c 	bic.w	r3, r3, ip
 80004fe:	408a      	lsls	r2, r1
 8000500:	4313      	orrs	r3, r2
 8000502:	60c3      	str	r3, [r0, #12]
}
 8000504:	4770      	bx	lr

08000506 <_ZN4Gpio8ResetPinENS_3PinE>:
void Gpio::SetPin(const Pin pin) {
    BOP |= (1 << etoi(pin));
}

void Gpio::ResetPin(const Pin pin) {
    BOP |= (1 << etoi(pin)) << 16;
 8000506:	6982      	ldr	r2, [r0, #24]
 8000508:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800050c:	408b      	lsls	r3, r1
 800050e:	4313      	orrs	r3, r2
 8000510:	6183      	str	r3, [r0, #24]
}
 8000512:	4770      	bx	lr

08000514 <_ZN7GpioPinC1ER4GpioNS0_3PinE>:
        AFSEL1 = ((AFSEL1 & ~(0xF << ((etoi(pin)-etoi(Pin::Pin8)) * 4))) | (etoi(function) << ((etoi(pin)-etoi(Pin::Pin8)) * 4)));
    }
}

GpioPin::GpioPin(Gpio& gpio, const Gpio::Pin pin)
    :gpio(gpio), pin(pin)
 8000514:	6001      	str	r1, [r0, #0]
 8000516:	7102      	strb	r2, [r0, #4]
{

}
 8000518:	4770      	bx	lr

0800051a <_ZNK7GpioPin3SetEv>:

void GpioPin::Set(void) const
{
    gpio.SetPin(pin);
 800051a:	6802      	ldr	r2, [r0, #0]
    BOP |= (1 << etoi(pin));
 800051c:	6991      	ldr	r1, [r2, #24]
 800051e:	7900      	ldrb	r0, [r0, #4]
 8000520:	2301      	movs	r3, #1
 8000522:	4083      	lsls	r3, r0
 8000524:	430b      	orrs	r3, r1
 8000526:	6193      	str	r3, [r2, #24]
}
 8000528:	4770      	bx	lr

0800052a <_ZNK7GpioPin5ResetEv>:

void GpioPin::Reset(void) const
{
 800052a:	b508      	push	{r3, lr}
    gpio.ResetPin(pin);
 800052c:	7901      	ldrb	r1, [r0, #4]
 800052e:	6800      	ldr	r0, [r0, #0]
 8000530:	f7ff ffe9 	bl	8000506 <_ZN4Gpio8ResetPinENS_3PinE>
}
 8000534:	bd08      	pop	{r3, pc}

08000536 <_ZNK7GpioPin8GetStateEv>:
    gpio.TogglePin(pin);
}

bool GpioPin::GetState(void) const
{
    return gpio.ReadPin(pin);
 8000536:	6803      	ldr	r3, [r0, #0]
    return (ISTAT & (1 << etoi(pin))) != 0 ? false: true;
 8000538:	691a      	ldr	r2, [r3, #16]
 800053a:	7901      	ldrb	r1, [r0, #4]
 800053c:	2301      	movs	r3, #1
 800053e:	408b      	lsls	r3, r1
 8000540:	4213      	tst	r3, r2
}
 8000542:	bf0c      	ite	eq
 8000544:	2001      	moveq	r0, #1
 8000546:	2000      	movne	r0, #0
 8000548:	4770      	bx	lr

0800054a <_ZNK7GpioPin7SetModeEN4Gpio4ModeE>:

void GpioPin::SetMode(const Gpio::Mode mode) const
{
 800054a:	b508      	push	{r3, lr}
 800054c:	460a      	mov	r2, r1
    gpio.SetPinMode(pin, mode);
 800054e:	7901      	ldrb	r1, [r0, #4]
 8000550:	6800      	ldr	r0, [r0, #0]
 8000552:	f7ff ffa9 	bl	80004a8 <_ZN4Gpio10SetPinModeENS_3PinENS_4ModeE>
}
 8000556:	bd08      	pop	{r3, pc}

08000558 <_ZNK7GpioPin13SetOutputTypeEN4Gpio10OutputTypeE>:

void GpioPin::SetOutputType(const Gpio::OutputType type) const
{
 8000558:	b508      	push	{r3, lr}
 800055a:	460a      	mov	r2, r1
    gpio.SetOutputType(pin, type);
 800055c:	7901      	ldrb	r1, [r0, #4]
 800055e:	6800      	ldr	r0, [r0, #0]
 8000560:	f7ff ffae 	bl	80004c0 <_ZN4Gpio13SetOutputTypeENS_3PinENS_10OutputTypeE>
}
 8000564:	bd08      	pop	{r3, pc}

08000566 <_ZNK7GpioPin14SetOutputSpeedEN4Gpio11OutputSpeedE>:

void GpioPin::SetOutputSpeed(const Gpio::OutputSpeed speed) const
{
 8000566:	b508      	push	{r3, lr}
 8000568:	460a      	mov	r2, r1
    gpio.SetOutputTypeSpeed(pin, speed);
 800056a:	7901      	ldrb	r1, [r0, #4]
 800056c:	6800      	ldr	r0, [r0, #0]
 800056e:	f7ff ffb2 	bl	80004d6 <_ZN4Gpio18SetOutputTypeSpeedENS_3PinENS_11OutputSpeedE>
}
 8000572:	bd08      	pop	{r3, pc}

08000574 <_ZNK7GpioPin7SetPullEN4Gpio4PullE>:

void GpioPin::SetPull(const Gpio::Pull pull) const
{
 8000574:	b508      	push	{r3, lr}
 8000576:	460a      	mov	r2, r1
    gpio.SetPinPull(pin, pull);
 8000578:	7901      	ldrb	r1, [r0, #4]
 800057a:	6800      	ldr	r0, [r0, #0]
 800057c:	f7ff ffb7 	bl	80004ee <_ZN4Gpio10SetPinPullENS_3PinENS_4PullE>
}
 8000580:	bd08      	pop	{r3, pc}

08000582 <rcu_periph_clock_enable>:
    \param[out] none
    \retval     none
*/
void rcu_periph_clock_enable(rcu_periph_enum periph)
{
    RCU_REG_VAL(periph) |= BIT(RCU_BIT_POS(periph));
 8000582:	0983      	lsrs	r3, r0, #6
 8000584:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8000588:	f503 330e 	add.w	r3, r3, #145408	@ 0x23800
 800058c:	6819      	ldr	r1, [r3, #0]
 800058e:	f000 001f 	and.w	r0, r0, #31
 8000592:	2201      	movs	r2, #1
 8000594:	4082      	lsls	r2, r0
 8000596:	430a      	orrs	r2, r1
 8000598:	601a      	str	r2, [r3, #0]
}
 800059a:	4770      	bx	lr

0800059c <register_fini>:
 800059c:	4b02      	ldr	r3, [pc, #8]	@ (80005a8 <register_fini+0xc>)
 800059e:	b113      	cbz	r3, 80005a6 <register_fini+0xa>
 80005a0:	4802      	ldr	r0, [pc, #8]	@ (80005ac <register_fini+0x10>)
 80005a2:	f7ff be5d 	b.w	8000260 <atexit>
 80005a6:	4770      	bx	lr
 80005a8:	00000000 	.word	0x00000000
 80005ac:	0800026d 	.word	0x0800026d

080005b0 <_init>:
 80005b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005b2:	bf00      	nop
 80005b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005b6:	bc08      	pop	{r3}
 80005b8:	469e      	mov	lr, r3
 80005ba:	4770      	bx	lr

080005bc <_fini>:
 80005bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005be:	bf00      	nop
 80005c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005c2:	bc08      	pop	{r3}
 80005c4:	469e      	mov	lr, r3
 80005c6:	4770      	bx	lr
